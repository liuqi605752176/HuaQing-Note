b:块设备文件(存储设备)
c:字符设备
d:目录文件
-:普通文件
l:链接文件
s:套接字文件
p:管道文件

输入:数据从内核空间流向用户空间   scanf
在用户空间的角度说,输入就是将数据从内核空间读到用户空间,读操作
输出:数据从用户空间流向内核空间   printf
在用户空间的角度说,输出就是将数据从用户空间写到内核空间,写操作

标准IO
1.属于C库调用
库其实就是功能函数的分装集合,二进制代码的集合

2.移植性强,通用性强,高级IO

3.自带缓存(蓄水池)
临时存放数据,对硬件起到保护作用(减少对磁盘的操作次数)
三种缓存:
行缓存(标准输出有关)
1k    1024byte
刷新条件:
1.'\n'  2.缓存区满了
3.程序正常退出时  main中使用return相当于退出程序
                 man 3 exit(库调用) --->void exit(int status);
                #include <stdlib.h>    清空缓存区的功能
                0  正常退出   EXIT_SUCCESS
                1  不正常退出 EXIT_FAILURE
                man 2 _exit(系统调用) 不清空缓存

                exit本质 是清空缓存区在调用 _exit来结束程序
                1.立刻关闭进程
                2.
                3.
                4.

4.fflush
int fflush(FILE *stream);
功能:强制刷新一个缓存区,将缓存区中的数据刷新到内核空间

全缓存(标准输入有关)
4k  1024*4byte
刷新条件:1.程序正常退出  2.缓存满了  3.fflush  4.关闭流

无缓存(标准错误有关)

文件IO
1.属于系统调用
2.移植性差  低级IO
3.不带缓存(本质是内核缓存)

三个流:
标准输入:stdin
标准输出:stdout
标准错误:stderr
vi -t stdin ---> extern struct _IO_FILE *stdin;
文件流指针本质就是结构体指针,该指针指向结构体struct _IO_FILE类型

fopen:
FILE *fopen(const char *path, const char *mode);
功能:打开一个指定路径的文件,返回该文件的文件流
参数:const char *path  需要打开的文件所在的路径
     const char *mode  打开文件时的权限
返回值:正确执行返回FILE*   vi -t FILE ----> typedef struct _IO_FILE FILE;
struct _IO_FILE 存放了打开的对应文件信息
错误返回NULL,并设置errno号
errno号本质是系统中通用类型错误号,是一个整形数值,而这些数值与对应的错误相绑定
errno对应的错误:/usr/include/asm-gengeric/errno-base.h 

strerror:
#include <string.h>
char *strerror(int errnum);
功能:通过获取的errno号得到对应的错误内容的字符串

fprintf:
int fprintf(FILE *stream, const char *format, ...);
功能:和printf相同按格式输出,可以输出结果到指定的文件流上(例如:errno输出到标准错误stderr)
注:printf默认输出到标准输出stdout

mode:这个参数是const char*是字符串,所以权限上要加上""
r:读操作 , 文件存在(处于文件开始位置),文件不存在,报错
