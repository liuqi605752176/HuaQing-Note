数据：
	信息的载体，能够输入到计算机当中，能被计算机识别，存储和处理的符号的总称。
数据元素：
	数据的基本单位，称为记录。
数据项：
	数据元素是由多个数据项组成的。

结构：
	逻辑结构：
		集合结构：数据元素之间除了同属于一个集合外，没有其他任何的关系
		线性结构：数据元素具有一对一的关系
		树形结构：数据元素具有一对多的关系
		图形结构：数据元素具有多对多的关系
	存储结构：（物理结构）
		顺序存储结构：数据元素存储在连续分配的地址空间当中
		链式存储结构：数据元素可以存储在任意合法的地址空间当中，地址空间可以连续也可以不连续
		索引存储结构：存储数据元素的同时，建立附加的索引表
		散列存储结构：（哈希）根据key值，和特定的函数计算出它的存储位置

算法：
	解决特定问题的步骤的描述

算法的基本特性：
	输入，输出，有穷性，确定性，可行性

算法的设计要求：
	正确性，可读性，健壮性，时间效率高，存储量低

算法的时间复杂度：
	随着输入规模n的增加，算法的执行时间的增长率和算法执行次数的增长率保持一致，我们称为算法的渐近时间复杂度
	简称为算法的时间复杂度
大O推导：
	使用常数1去替代表达式中的常数项
	在修改后的表达式中，只保留最高阶次项
	如果最高阶次项存在且不为1，我们去掉最高阶次项的系数

冒泡：平方级

算法的空间复杂度
	

线性表：
	数据元素具有线性结构（一对一）

直接前驱：
直接后继
特性：非空表：
	a1是表头，没有直接前驱
	an是表尾，没有直接后继
	中间的数据元素，有且只有一个直接前驱和直接后继

顺序表：
	线性表的顺序存储结构
list.c   list_size.c(创建指定大小的顺序表)


链表：
	线性表的链式存储结构
	link.c  （单向链表） （一个数据域，一个指针域） 
	dblink.c（双向链表） （一个数据域，2个指针域）
	link_c.c（单向循环链表）
	
栈：后进先出(FILO)的线性表，只允许在一端进行数据操作 

	栈顶：允许操作（入，出）的一端 
	栈底：固定的一端 

	
	增加数据：压栈 或者 进栈
	删除数据：弹栈 或者 出栈 
 
栈的顺序存储结构：
				顺序栈（尾进尾出）  
				stack.c

栈的链式存储结构：
				链式栈（头进头出）
				linkstack.c
				
				
队列：先进先出（FIFO）的线性表，允许在两端进行数据操作

	队头：可以进行数据删除的一端
	队尾：可以进行数据增加的一端  

	增加数据：入队 
	删除数据：出队  
 


队列的链式存储结构：
				链式队列 （尾进头出）  linkqueue.c
队列的顺序存储结构：	
				顺序循环队列 （尾进头出）queue.c

树：
	树的顺序存储结构：浪费空间
	树的链式存储结构：
					tree.c
	树的遍历方式：
		先序遍历：根左右
		中序遍历：左根右
		后序遍历：左右根
		层次遍历：逐层遍历
	

