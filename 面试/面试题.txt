1、如果没有I2C控制器，如何使用I2C设备
    利用GPIO软件模拟I2C

2、linxu设备驱动模型
	分层和分离的思想
	分层：在设备驱动方面，往往为同类的设备设计一个框架，框架的核心层实现了通用操作，如果具体设备需要具体操作，可以进行重载
	分离：对主机控制器驱动和外设驱动进行分离
 
 3.linux设备模型核心思想
 	bus、class、device、device driver
 	bus:所有的设备都应连接到总线上
 	class:抽象出一套可以在多个设备之间公用的结构体和接口函数
 	device：抽象系统中所有的硬件设备,描述他的信息
 	device driver:利用接口函数进行驱动开发

 	核心思想：
 	1.用device和driver两个数据结构描述硬件设备，统一编写设备驱动的格式，简化开发难度
 	2.使用Device和Device Driver两个数据结构，实现硬件设备的即插即用（热拔插）
 	3.通过"Bus-->Device”类型的树状结构，解决设备之间的依赖
 	4.使用Class结构，在设备模型中引入面向对象的概念，最大限度地抽象共性，减少驱动开发过程中的重复劳		动，降低工作量
	
	https://blog.csdn.net/xiaommcong/article/details/51317090

4.为什么要用平台总线
    SOC内部必须使用平台总线

5.任意类型与0比较
    int a: if(a == 0)
    bool a : if(a) if(!a)
    char a : if(a == '0')
    字符串 ： if(a == "0")
    float a : if ((x>=-EPSINON) &&(x<=EPSINON))  //EPSINON代表的是精度0.00001
    指针 p : if(p == NULL)
6.应用层如何直接操作硬件
    file_operations里用一个函数接口mmap,mmap函数，将寄存器的地址映射到用户空间，直接在应用层对寄存器进行操作

7.inode 和file结构体有什么区别
	inode:创建一个文件时，就会在相应的文件系统创建一个inode与之对应，文件实体和文件的inode是一一对应的
	file:每一个进程维护一个文件描述符表,这个表其实就是 struct file[]的索引。open()的过程其实
	就是根据传入的路径填充好一个file结构并将其赋值到数组中并返回其索引。

	https://www.cnblogs.com/xiaojiang1025/p/6363626.html
	
8.应用程序是怎么调用内核的？
				 应用层
	  			    |
	内核空间：系统调用、内存管理、进程管理、VFS、网络协议栈

	VFS:为文件系统提供统一的接口，通过VFS访问内核

9.什么驱动需要基于platform平台总线编写
	大多数设备都是集成在soc内部，和cpu直接连接，将其直接扩展到内部地址空间，linux内核中常见的的总线有I2C总线，PCI总线，串口总线，SPI总线，PCI总线，CAN总线，单总线等，所以有些设备和驱动就可以挂在这些总线上，然后通过总线上的match进行设备和驱动的匹配。但是有的设备并不属于这些常见总线，这些总线归纳为platform平台总线编写

10.什么硬件信息需要在设备树中添加
	CPU的数量和类别
	内存基地址和大小
	总线和桥
	外设连接
	中断控制器和中断使用情况
	GPIO控制器和GPIO使用情况
	Clock控制器和Clock使用情况

11.strcpy函数实现
char *strcpy(char *dest, const char *src)
{
	assert(dest != NULL && src != NULL);
	char *tmp = dest;

	while ((*dest++ = *src++) != '\0')
		/* nothing */;
	return tmp;
}
12.strcat函数实现
char* MyStrcat(char *dst, const char *src)
{
    assert(dst != NULL && src != NULL);
    char *temp = dst;
    while (*temp != '\0')
        temp++;
    while ((*temp++ = *src++) != '\0');

    return dst;
}

13.如何用UDP模拟TCP？

14.三次握手，四次挥手

15.volaite作用
	内存可见性：通知内核该变量易变，直接从主内存中取值，保证该值永远是最新的，
	禁止指令重排序：为了尽可能减少内存操作速度远慢于CPU运行速度所带来的CPU空置的影响，虚拟机会按照自己的一些规则将程序编写顺序打乱
	3个例子：
		1.并行设备的寄存器(状态寄存器)
		2.多线程共享的全局变量
		3..中断函数子程序 访问的非自动变量
16.static作用
	修饰全局变量，限定作用域
	修饰局部变量，改变存储域
	修饰函数，限定该函数仅对本文件游泳，不能被外部被extern引用
17.const用途
	1.const修饰变量
		const int *a：指针所指向的内容不可改变，指针指向可以改变
		int * const a ：指针的指向不能改变，指针所指向的内容可以改变
		const int * const a：都不能改变
18.%x打印按照32位补齐，无符号数补0，有符号数补符号位


19.冒泡时间复杂度n^2,快排nlogn,n^2

20.内联函数inline
	被inline修饰的函数，会在它被调用的未知展开，消除函数调用以及返回带来的开销
	缺点：当内联函数过长，代码会变得很长，会占用更多的内存
	static inline 不加static，说明可能被其他编译单元调用，增加代码量，加了，一般指令文件变小

21.const和#define相比有什么不同
	C++中，两者都可以定义常量
	const 							#define
	常量有数据类型，					常量没有数据类型
	编译器会对类型进行安全检查			没有安全检查，只负责字符替换
	
22.编写驱动的流程

确定驱动架构：根据硬件连接方式结合分层/分离思想设计驱动的基本结构
确定驱动对象：内核中的一个驱动/设备就是一个对象，1.定义，2.初始化，3.注册，4.注销
向上提供接口：根据业务需要确定提供cdev/proc/sysfs哪种接口
向下控制硬件：1.查看原理图确定引脚和控制逻辑，2.查看芯片手册确定寄存器配置方式，3.进行内存映射，4.实现控制逻辑