ARM知识点整理

一、关于ARM的PC指针(什么时候PC, PC-4,PC-8)
首先当发生异常跳转时，LR保存PC的值，以便异常结束后返回到原来进入异常的的入口处执行先前的下一条指令
1.程序正常跳转，LR = PC + 4,所以返回时可以直接返回
2.IRQ/FIQ中断，处于指令的执行阶段，故LR = PC + 8,返回时需要将LR - 4赋给PC
  即SUBS PC,LR,#4
3.未定义指令异常：处于指令的译码阶段，LR = PC + 4,返回时直接返回
4.预取指令异常：处于指令的执行阶段，LR = PC + 8,返回时将LR - 4赋给PC 	    
5.数据中止异常：处于指令执行结束阶段，LR = PC + 12,返回时将LR - 8赋给PC

二、异常处理流程
1.保存当前执行状态
	将CPSR保存到相应的模式下的SPSR寄存器下
	比如进入IRQ中断，SPSR_IRQ = CPSR

2.模式切换
	更新CPSR寄存器的M[4:0],I,F,T位

3.保存返回地址
	LR = PC，具体返回要看异常情况，参考第一条知识点。

4.跳入异常向量表
	每种异常都有固定的地址，称之位异常向量
	当异常发生时，CPU强制刷新PC，使其指向相应的异常向量

三、异常处理函数过程
1.保护现场
	STMFD SP!,{R0-R12,LR}
	注意：在进行异常处理函数前，已经进行了切换异常模式，所以SP为异常模式下的相应SP寄存器
2.异常处理过程
	异常处理函数
3.异常返回
	LDMFD SP!,{R0-R12,PC}^

	①恢复被打断程序运行时的寄存器数据
	R0-12从异常栈恢复
	②恢复程序运行时的状态CPSR
		CPSR = SPSR_<mode>
	③通过保存的LR地址，将PC返回异常产生的入口的下一条指令处
		参考第一条知识点
		

四、SOC外部中断
1.配置中断源
	1.选择中断功能
	2.选择中断触发条件
	3.使能中断源
2.找中断号{在 中断控制器说明里查找 中断名称}

3.配置中断控制器
	1.使能中断控制器
	2.设置对应中断号使能
	3.设置中断优先级
	4.设置中断安全
	5.选择中断类型 irq fiq
	6.选择cpu（多核架构下） 
	
4.编写中断代码
	1.读取中断号
	2.执行中断任务
	3.清中断源信号
	4.清除中断控制器状态


五、PWM：脉宽调制
配置一个定时器，以下步骤：
1.TCFG0(定时器配置寄存器0)
	配置prescaler预分频

2.TCFG1(定时器配置寄存器1)
	配置clock divider:1,2,4,8,16分频
3.TCNTBn(计数初值寄存器)
4.TCON(定时器控制寄存器)
	工作模式：reload,update,start/stop,dead zone
	注：reload：置1自动装载
		uodate:更新装载值
		start/stop:开启关闭定时器
		dead zone:死区
		update位和开启位要分开设置
5.TINT_CSTAT(定时器中断状态寄存器)
	配置中断使能/关闭
	注：bits[9：4]写1清0
6.查中断号
7.配置中断控制器
8.配置中断代码

配置一个PWM脉冲调制，需要以下步骤
先要初始化GPIO口，选择tcout输出模式
1.TCFG0
2.TCFG1
3.TCON
4.TCNTBn
5.TCMPBn
	设置占空比,与TCNTBn比较就能控制输出波形


六、RTC
1.RTCCON
	使能RTC,编码方式等等
2.BCDYEAR等日期寄存器
	需要手动将十进制年月日换算成BCD码进行设置
3.RTCCON





